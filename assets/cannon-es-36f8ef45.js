class K{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new l);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new l);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new K);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],c=s[2],a=s[3],h=s[4],u=s[5],d=s[6],f=s[7],p=s[8],w=n[0],m=n[1],y=n[2],v=n[3],x=n[4],g=n[5],E=n[6],C=n[7],N=n[8];return i[0]=o*w+r*v+c*E,i[1]=o*m+r*x+c*C,i[2]=o*y+r*g+c*N,i[3]=a*w+h*v+u*E,i[4]=a*m+h*x+u*C,i[5]=a*y+h*g+u*N,i[6]=d*w+f*v+p*E,i[7]=d*m+f*x+p*C,i[8]=d*y+f*g+p*N,e}scale(t,e){e===void 0&&(e=new K);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new l);const s=3,n=4,i=[];let o,r;for(o=0;o<s*n;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+n*r]=this.elements[o+3*r];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let c=3;const a=c;let h;const u=4;let d;do{if(o=a-c,i[o+n*o]===0){for(r=o+1;r<a;r++)if(i[o+n*r]!==0){h=u;do d=u-h,i[d+n*o]+=i[d+n*r];while(--h);break}}if(i[o+n*o]!==0)for(r=o+1;r<a;r++){const f=i[o+n*r]/i[o+n*o];h=u;do d=u-h,i[d+n*r]=d<=o?0:i[d+n*r]-i[d+n*o]*f;while(--h)}}while(--c);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new K);const e=3,s=6,n=Be;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+s*o]=this.elements[i+3*o];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let r=3;const c=r;let a;const h=s;let u;do{if(i=c-r,n[i+s*i]===0){for(o=i+1;o<c;o++)if(n[i+s*o]!==0){a=h;do u=h-a,n[u+s*i]+=n[u+s*o];while(--a);break}}if(n[i+s*i]!==0)for(o=i+1;o<c;o++){const d=n[i+s*o]/n[i+s*i];a=h;do u=h-a,n[u+s*o]=u<=i?0:n[u+s*o]-n[u+s*i]*d;while(--a)}}while(--r);i=2;do{o=i-1;do{const d=n[i+s*o]/n[i+s*i];a=s;do u=s-a,n[u+s*o]=n[u+s*o]-n[u+s*i]*d;while(--a)}while(o--)}while(--i);i=2;do{const d=1/n[i+s*i];a=s;do u=s-a,n[u+s*i]=n[u+s*i]*d;while(--a)}while(i--);i=2;do{o=2;do{if(u=n[e+o+s*i],isNaN(u)||u===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,u)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,c=n+n,a=e*o,h=e*r,u=e*c,d=s*r,f=s*c,p=n*c,w=i*o,m=i*r,y=i*c,v=this.elements;return v[3*0+0]=1-(d+p),v[3*0+1]=h-y,v[3*0+2]=u+m,v[3*1+0]=h+y,v[3*1+1]=1-(a+p),v[3*1+2]=f-w,v[3*2+0]=u-m,v[3*2+1]=f+w,v[3*2+2]=1-(a+d),this}transpose(t){t===void 0&&(t=new K);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const Be=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class l{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new l);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,c=this.z;return e.x=r*i-c*n,e.y=c*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new l(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new l(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new K([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new l);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){e===void 0&&(e=new l);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new l),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new l),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new l),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=Me,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=Ne;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(Dt),Dt.almostEquals(t,e)}clone(){return new l(this.x,this.y,this.z)}}l.ZERO=new l(0,0,0);l.UNIT_X=new l(1,0,0);l.UNIT_Y=new l(0,1,0);l.UNIT_Z=new l(0,0,1);const Me=new l,Ne=new l,Dt=new l;class j{constructor(t){t===void 0&&(t={}),this.lowerBound=new l,this.upperBound=new l,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let c=1;c<t.length;c++){let a=t[c];r&&(r.vmult(a,Yt),a=Yt),a.x>o.x&&(o.x=a.x),a.x<i.x&&(i.x=a.x),a.y>o.y&&(o.y=a.y),a.y<i.y&&(i.y=a.y),a.z>o.z&&(o.z=a.z),a.z<i.z&&(i.z=a.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new j().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,o=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,r=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,c=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return o&&r&&c}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,c){const a=this.lowerBound,h=this.upperBound;t.copy(a),e.set(h.x,a.y,a.z),s.set(h.x,h.y,a.z),n.set(a.x,h.y,h.z),i.set(h.x,a.y,h.z),o.set(a.x,h.y,a.z),r.set(a.x,a.y,h.z),c.copy(h)}toLocalFrame(t,e){const s=Ut,n=s[0],i=s[1],o=s[2],r=s[3],c=s[4],a=s[5],h=s[6],u=s[7];this.getCorners(n,i,o,r,c,a,h,u);for(let d=0;d!==8;d++){const f=s[d];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=Ut,n=s[0],i=s[1],o=s[2],r=s[3],c=s[4],a=s[5],h=s[6],u=s[7];this.getCorners(n,i,o,r,c,a,h,u);for(let d=0;d!==8;d++){const f=s[d];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,c=(this.upperBound.x-s.x)*n,a=(this.lowerBound.y-s.y)*i,h=(this.upperBound.y-s.y)*i,u=(this.lowerBound.z-s.z)*o,d=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,c),Math.min(a,h)),Math.min(u,d)),p=Math.min(Math.min(Math.max(r,c),Math.max(a,h)),Math.max(u,d));return!(p<0||f>p)}}const Yt=new l,Ut=[new l,new l,new l,new l,new l,new l,new l,new l];class Xt{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class we{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class G{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new l),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=Se,n=Te;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new G);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,c=t.y,a=t.z,h=t.w;return e.x=s*h+o*r+n*a-i*c,e.y=n*h+o*c+i*r-s*a,e.z=i*h+o*a+s*c-n*r,e.w=o*h-s*r-n*c-i*a,e}inverse(t){t===void 0&&(t=new G);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new G),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new l);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,c=this.z,a=this.w,h=a*s+r*i-c*n,u=a*n+c*s-o*i,d=a*i+o*n-r*s,f=-o*s-r*n-c*i;return e.x=h*a+f*-o+u*-c-d*-r,e.y=u*a+f*-r+d*-o-h*-c,e.z=d*a+f*-c+h*-r-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const o=this.x,r=this.y,c=this.z,a=this.w;switch(e){case"YZX":const h=o*r+c*a;if(h>.499&&(s=2*Math.atan2(o,a),n=Math.PI/2,i=0),h<-.499&&(s=-2*Math.atan2(o,a),n=-Math.PI/2,i=0),s===void 0){const u=o*o,d=r*r,f=c*c;s=Math.atan2(2*r*a-2*o*c,1-2*d-2*f),n=Math.asin(2*h),i=Math.atan2(2*o*a-2*r*c,1-2*u-2*f)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),c=Math.sin(t/2),a=Math.sin(e/2),h=Math.sin(s/2);return n==="XYZ"?(this.x=c*o*r+i*a*h,this.y=i*a*r-c*o*h,this.z=i*o*h+c*a*r,this.w=i*o*r-c*a*h):n==="YXZ"?(this.x=c*o*r+i*a*h,this.y=i*a*r-c*o*h,this.z=i*o*h-c*a*r,this.w=i*o*r+c*a*h):n==="ZXY"?(this.x=c*o*r-i*a*h,this.y=i*a*r+c*o*h,this.z=i*o*h+c*a*r,this.w=i*o*r-c*a*h):n==="ZYX"?(this.x=c*o*r-i*a*h,this.y=i*a*r+c*o*h,this.z=i*o*h-c*a*r,this.w=i*o*r+c*a*h):n==="YZX"?(this.x=c*o*r+i*a*h,this.y=i*a*r+c*o*h,this.z=i*o*h-c*a*r,this.w=i*o*r-c*a*h):n==="XZY"&&(this.x=c*o*r-i*a*h,this.y=i*a*r-c*o*h,this.z=i*o*h+c*a*r,this.w=i*o*r+c*a*h),this}clone(){return new G(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new G);const n=this.x,i=this.y,o=this.z,r=this.w;let c=t.x,a=t.y,h=t.z,u=t.w,d,f,p,w,m;return f=n*c+i*a+o*h+r*u,f<0&&(f=-f,c=-c,a=-a,h=-h,u=-u),1-f>1e-6?(d=Math.acos(f),p=Math.sin(d),w=Math.sin((1-e)*d)/p,m=Math.sin(e*d)/p):(w=1-e,m=e),s.x=w*n+m*c,s.y=w*i+m*a,s.z=w*o+m*h,s.w=w*r+m*u,s}integrate(t,e,s,n){n===void 0&&(n=new G);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,c=this.x,a=this.y,h=this.z,u=this.w,d=e*.5;return n.x+=d*(i*u+o*h-r*a),n.y+=d*(o*u+r*c-i*h),n.z+=d*(r*u+i*a-o*c),n.w+=d*(-i*c-o*a-r*h),n}}const Se=new l,Te=new l,Pe={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class B{constructor(t){t===void 0&&(t={}),this.id=B.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}B.idCounter=0;B.types=Pe;class W{constructor(t){t===void 0&&(t={}),this.position=new l,this.quaternion=new G,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return W.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return W.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new l),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new l),s.vsub(t,n),e.conjugate($t),$t.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new l),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new l),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new l),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const $t=new G;class ct extends B{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:B.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new l;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let c=0;c!==r;c++){const a=(c+1)%r;e[o[c]].vsub(e[o[a]],n),n.normalize();let h=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(n)||s[u].almostEquals(n)){h=!0;break}h||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new l;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],o=this.vertices[s[2]];ct.computeNormal(n,i,o,e)}static computeNormal(t,e,s,n){const i=new l,o=new l;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,c,a){const h=new l;let u=-1,d=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){h.copy(s.faceNormals[p]),i.vmult(h,h);const w=h.dot(o);w>d&&(d=w,u=p)}const f=[];for(let p=0;p<s.faces[u].length;p++){const w=s.vertices[s.faces[u][p]],m=new l;m.copy(w),i.vmult(m,m),n.vadd(m,m),f.push(m)}u>=0&&this.clipFaceAgainstHull(o,t,e,f,r,c,a)}findSeparatingAxis(t,e,s,n,i,o,r,c){const a=new l,h=new l,u=new l,d=new l,f=new l,p=new l;let w=Number.MAX_VALUE;const m=this;if(m.uniqueAxes)for(let y=0;y!==m.uniqueAxes.length;y++){s.vmult(m.uniqueAxes[y],a);const v=m.testSepAxis(a,t,e,s,n,i);if(v===!1)return!1;v<w&&(w=v,o.copy(a))}else{const y=r?r.length:m.faces.length;for(let v=0;v<y;v++){const x=r?r[v]:v;a.copy(m.faceNormals[x]),s.vmult(a,a);const g=m.testSepAxis(a,t,e,s,n,i);if(g===!1)return!1;g<w&&(w=g,o.copy(a))}}if(t.uniqueAxes)for(let y=0;y!==t.uniqueAxes.length;y++){i.vmult(t.uniqueAxes[y],h);const v=m.testSepAxis(h,t,e,s,n,i);if(v===!1)return!1;v<w&&(w=v,o.copy(h))}else{const y=c?c.length:t.faces.length;for(let v=0;v<y;v++){const x=c?c[v]:v;h.copy(t.faceNormals[x]),i.vmult(h,h);const g=m.testSepAxis(h,t,e,s,n,i);if(g===!1)return!1;g<w&&(w=g,o.copy(h))}}for(let y=0;y!==m.uniqueEdges.length;y++){s.vmult(m.uniqueEdges[y],d);for(let v=0;v!==t.uniqueEdges.length;v++)if(i.vmult(t.uniqueEdges[v],f),d.cross(f,p),!p.almostZero()){p.normalize();const x=m.testSepAxis(p,t,e,s,n,i);if(x===!1)return!1;x<w&&(w=x,o.copy(p))}}return n.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){const r=this;ct.project(r,t,s,n,Ft),ct.project(e,t,i,o,_t);const c=Ft[0],a=Ft[1],h=_t[0],u=_t[1];if(c<u||h<a)return!1;const d=c-u,f=h-a;return d<f?d:f}calculateLocalInertia(t,e){const s=new l,n=new l;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,o,r){const c=new l,a=new l,h=new l,u=new l,d=new l,f=new l,p=new l,w=new l,m=this,y=[],v=n,x=y;let g=-1,E=Number.MAX_VALUE;for(let T=0;T<m.faces.length;T++){c.copy(m.faceNormals[T]),s.vmult(c,c);const F=c.dot(t);F<E&&(E=F,g=T)}if(g<0)return;const C=m.faces[g];C.connectedFaces=[];for(let T=0;T<m.faces.length;T++)for(let F=0;F<m.faces[T].length;F++)C.indexOf(m.faces[T][F])!==-1&&T!==g&&C.connectedFaces.indexOf(T)===-1&&C.connectedFaces.push(T);const N=C.length;for(let T=0;T<N;T++){const F=m.vertices[C[T]],V=m.vertices[C[(T+1)%N]];F.vsub(V,a),h.copy(a),s.vmult(h,h),e.vadd(h,h),u.copy(this.faceNormals[g]),s.vmult(u,u),e.vadd(u,u),h.cross(u,d),d.negate(d),f.copy(F),s.vmult(f,f),e.vadd(f,f);const b=C.connectedFaces[T];p.copy(this.faceNormals[b]);const M=this.getPlaneConstantOfFace(b);w.copy(p),s.vmult(w,w);const A=M-w.dot(e);for(this.clipFaceAgainstPlane(v,x,w,A);v.length;)v.shift();for(;x.length;)v.push(x.shift())}p.copy(this.faceNormals[g]);const P=this.getPlaneConstantOfFace(g);w.copy(p),s.vmult(w,w);const R=P-w.dot(e);for(let T=0;T<v.length;T++){let F=w.dot(v[T])+R;if(F<=i&&(console.log(`clamped: depth=${F} to minDist=${i}`),F=i),F<=o){const V=v[T];if(F<=1e-6){const b={point:V,normal:w,depth:F};r.push(b)}}}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let c=t[t.length-1],a=t[0];i=s.dot(c)+n;for(let h=0;h<r;h++){if(a=t[h],o=s.dot(a)+n,i<0)if(o<0){const u=new l;u.copy(a),e.push(u)}else{const u=new l;c.lerp(a,i/(i-o),u),e.push(u)}else if(o<0){const u=new l;c.lerp(a,i/(i-o),u),e.push(u),e.push(a)}c=a,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new l);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new l);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,c,a,h,u,d=new l;for(let f=0;f<i.length;f++){d.copy(i[f]),e.vmult(d,d),t.vadd(d,d);const p=d;(o===void 0||p.x<o)&&(o=p.x),(a===void 0||p.x>a)&&(a=p.x),(r===void 0||p.y<r)&&(r=p.y),(h===void 0||p.y>h)&&(h=p.y),(c===void 0||p.z<c)&&(c=p.z),(u===void 0||p.z>u)&&(u=p.z)}s.set(o,r,c),n.set(a,h,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new l);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=null,o=new l;this.getAveragePointLocal(o);for(let r=0;r<this.faces.length;r++){let c=n[r];const a=e[s[r][0]],h=new l;t.vsub(a,h);const u=c.dot(h),d=new l;o.vsub(a,d);const f=c.dot(d);if(u<0&&f>0||u>0&&f<0)return!1}return i?1:-1}static project(t,e,s,n,i){const o=t.vertices.length,r=Fe;let c=0,a=0;const h=_e,u=t.vertices;h.setZero(),W.vectorToLocalFrame(s,n,e,r),W.pointToLocalFrame(s,n,h,h);const d=h.dot(r);a=c=u[0].dot(r);for(let f=1;f<o;f++){const p=u[f].dot(r);p>c&&(c=p),p<a&&(a=p)}if(a-=d,c-=d,a>c){const f=a;a=c,c=f}i[0]=c,i[1]=a}}const Ft=[],_t=[],Ie=new l,Fe=new l,_e=new l;class Ot extends B{constructor(t){super({type:B.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=l,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],c=new ct({vertices:i,faces:o,axes:r});this.convexPolyhedronRepresentation=c,c.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new l),Ot.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)rt.set(i[o][0],i[o][1],i[o][2]),e.vmult(rt,rt),t.vadd(rt,rt),s(rt.x,rt.y,rt.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;Z[0].set(i.x,i.y,i.z),Z[1].set(-i.x,i.y,i.z),Z[2].set(-i.x,-i.y,i.z),Z[3].set(-i.x,-i.y,-i.z),Z[4].set(i.x,-i.y,-i.z),Z[5].set(i.x,i.y,-i.z),Z[6].set(-i.x,i.y,-i.z),Z[7].set(i.x,-i.y,i.z);const o=Z[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const c=Z[r];e.vmult(c,c),t.vadd(c,c);const a=c.x,h=c.y,u=c.z;a>n.x&&(n.x=a),h>n.y&&(n.y=h),u>n.z&&(n.z=u),a<s.x&&(s.x=a),h<s.y&&(s.y=h),u<s.z&&(s.z=u)}}}const rt=new l,Z=[new l,new l,new l,new l,new l,new l,new l,new l],jt={DYNAMIC:1,STATIC:2,KINEMATIC:4},kt={AWAKE:0,SLEEPY:1,SLEEPING:2};class S extends we{constructor(t){t===void 0&&(t={}),super(),this.id=S.idCounter++,this.index=-1,this.world=null,this.vlambda=new l,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new l,this.previousPosition=new l,this.interpolatedPosition=new l,this.initPosition=new l,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new l,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new l,this.force=new l;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?S.STATIC:S.DYNAMIC,typeof t.type==typeof S.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep<"u"?t.allowSleep:!0,this.sleepState=S.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new l,this.quaternion=new G,this.initQuaternion=new G,this.previousQuaternion=new G,this.interpolatedQuaternion=new G,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new l,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new l,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new l,this.invInertia=new l,this.invInertiaWorld=new K,this.invMassSolve=0,this.invInertiaSolve=new l,this.invInertiaWorldSolve=new K,this.fixedRotation=typeof t.fixedRotation<"u"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new l(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new l(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new j,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new l,this.isTrigger=!!t.isTrigger,t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=S.AWAKE,this.wakeUpAfterNarrowphase=!1,t===S.SLEEPING&&this.dispatchEvent(S.wakeupEvent)}sleep(){this.sleepState=S.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===S.AWAKE&&s<n?(this.sleepState=S.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(S.sleepyEvent)):e===S.SLEEPY&&s>n?this.wakeUp():e===S.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(S.sleepEvent))}}updateSolveMassProperties(){this.sleepState===S.SLEEPING||this.type===S.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new l),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new l),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new l),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new l),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new l,i=new G;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),c=o.boundingSphereRadius;r+c>n&&(n=r+c)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=Re,o=qe,r=this.quaternion,c=this.aabb,a=Ve;for(let h=0;h!==n;h++){const u=t[h];r.vmult(e[h],i),i.vadd(this.position,i),r.mult(s[h],o),u.calculateWorldAABB(i,o,a.lowerBound,a.upperBound),h===0?c.copy(a):c.extend(a)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=Le,n=We;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new l),this.type!==S.DYNAMIC)return;this.sleepState===S.SLEEPING&&this.wakeUp();const s=je;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new l),this.type!==S.DYNAMIC)return;const s=ke,n=He;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===S.DYNAMIC&&(this.sleepState===S.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new l),this.type!==S.DYNAMIC)return;this.sleepState===S.SLEEPING&&this.wakeUp();const s=e,n=Ge;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=De;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new l),this.type!==S.DYNAMIC)return;const s=Ye,n=Ue;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=Xe;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Ot.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new l;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===S.DYNAMIC||this.type===S.KINEMATIC)||this.sleepState===S.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,c=this.torque,a=this.quaternion,h=this.invMass,u=this.invInertiaWorld,d=this.linearFactor,f=h*t;n.x+=r.x*f*d.x,n.y+=r.y*f*d.y,n.z+=r.z*f*d.z;const p=u.elements,w=this.angularFactor,m=c.x*w.x,y=c.y*w.y,v=c.z*w.z;i.x+=t*(p[0]*m+p[1]*y+p[2]*v),i.y+=t*(p[3]*m+p[4]*y+p[5]*v),i.z+=t*(p[6]*m+p[7]*y+p[8]*v),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,a.integrate(this.angularVelocity,t,this.angularFactor,a),e&&(s?a.normalizeFast():a.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}S.idCounter=0;S.COLLIDE_EVENT_NAME="collide";S.DYNAMIC=jt.DYNAMIC;S.STATIC=jt.STATIC;S.KINEMATIC=jt.KINEMATIC;S.AWAKE=kt.AWAKE;S.SLEEPY=kt.SLEEPY;S.SLEEPING=kt.SLEEPING;S.wakeupEvent={type:"wakeup"};S.sleepyEvent={type:"sleepy"};S.sleepEvent={type:"sleep"};const Re=new l,qe=new G,Ve=new j,Le=new K,We=new K,Oe=new K,je=new l,ke=new l,He=new l,Ge=new l,De=new l,Ye=new l,Ue=new l,Xe=new l;class $e{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!(!(t.collisionFilterGroup&e.collisionFilterMask)||!(e.collisionFilterGroup&t.collisionFilterMask)||(t.type&S.STATIC||t.sleepState===S.SLEEPING)&&(e.type&S.STATIC||e.sleepState===S.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=Ke;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=Ze,n=Qe,i=Je,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const c=n[r].id,a=i[r].id,h=c<a?`${c},${a}`:`${a},${c}`;s[h]=r,s.keys.push(h)}for(let r=0;r!==s.keys.length;r++){const c=s.keys.pop(),a=s[c];t.push(n[a]),e.push(i[a]),delete s[c]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new l;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const Ke=new l;new l;new G;new l;const Ze={keys:[]},Qe=[],Je=[];new l;new l;new l;class ts extends $e{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let c=0;c!==i;c++)for(let a=0;a!==c;a++)o=n[c],r=n[a],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class Nt{constructor(){this.rayFromWorld=new l,this.rayToWorld=new l,this.hitNormalWorld=new l,this.hitPointWorld=new l,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let ye,xe,ge,be,Ee,ze,Ce;const Ht={CLOSEST:1,ANY:2,ALL:4};ye=B.types.SPHERE;xe=B.types.PLANE;ge=B.types.BOX;be=B.types.CYLINDER;Ee=B.types.CONVEXPOLYHEDRON;ze=B.types.HEIGHTFIELD;Ce=B.types.TRIMESH;class H{get[ye](){return this._intersectSphere}get[xe](){return this._intersectPlane}get[ge](){return this._intersectBox}get[be](){return this._intersectConvex}get[Ee](){return this._intersectConvex}get[ze](){return this._intersectHeightfield}get[Ce](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new l),e===void 0&&(e=new l),this.from=t.clone(),this.to=e.clone(),this.direction=new l,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=H.ANY,this.result=new Nt,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||H.ANY,this.result=e.result||new Nt,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse<"u"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(Kt),Rt.length=0,t.broadphase.aabbQuery(t,Kt,Rt),this.intersectBodies(Rt),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||!(this.collisionFilterGroup&t.collisionFilterMask)||!(t.collisionFilterGroup&this.collisionFilterMask))return;const n=es,i=ss;for(let o=0,r=t.shapes.length;o<r;o++){const c=t.shapes[o];if(!(s&&!c.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(c,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(ms(i,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,c=this.direction,a=new l(0,0,1);e.vmult(a,a);const h=new l;o.vsub(s,h);const u=h.dot(a);r.vsub(s,h);const d=h.dot(a);if(u*d>0||o.distanceTo(r)<u)return;const f=a.dot(c);if(Math.abs(f)<this.precision)return;const p=new l,w=new l,m=new l;o.vsub(s,p);const y=-a.dot(p)/f;c.scale(y,w),o.vadd(w,m),this.reportIntersection(a,m,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const o=ns;o.from.copy(this.from),o.to.copy(this.to),W.pointToLocalFrame(s,e,o.from,o.from),W.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=is;let c,a,h,u;c=a=0,h=u=t.data.length-1;const d=new j;o.getAABB(d),t.getIndexOfPosition(d.lowerBound.x,d.lowerBound.y,r,!0),c=Math.max(c,r[0]),a=Math.max(a,r[1]),t.getIndexOfPosition(d.upperBound.x,d.upperBound.y,r,!0),h=Math.min(h,r[0]+1),u=Math.min(u,r[1]+1);for(let f=c;f<h;f++)for(let p=a;p<u;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,p,d),!!d.overlapsRay(o)){if(t.getConvexTrianglePillar(f,p,!1),W.pointToWorldFrame(s,e,t.pillarOffset,bt),this._intersectConvex(t.pillarConvex,e,bt,n,i,Zt),this.result.shouldStop)return;t.getConvexTrianglePillar(f,p,!0),W.pointToWorldFrame(s,e,t.pillarOffset,bt),this._intersectConvex(t.pillarConvex,e,bt,n,i,Zt)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,c=t.radius,a=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,h=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),u=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-c**2,d=h**2-4*a*u,f=os,p=rs;if(!(d<0))if(d===0)o.lerp(r,d,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1);else{const w=(-h-Math.sqrt(d))/(2*a),m=(-h+Math.sqrt(d))/(2*a);if(w>=0&&w<=1&&(o.lerp(r,w,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1)),this.result.shouldStop)return;m>=0&&m<=1&&(o.lerp(r,m,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=cs,c=Qt,a=o&&o.faceList||null,h=t.faces,u=t.vertices,d=t.faceNormals,f=this.direction,p=this.from,w=this.to,m=p.distanceTo(w),y=a?a.length:h.length,v=this.result;for(let x=0;!v.shouldStop&&x<y;x++){const g=a?a[x]:x,E=h[g],C=d[g],N=e,P=s;c.copy(u[E[0]]),N.vmult(c,c),c.vadd(P,c),c.vsub(p,c),N.vmult(C,r);const R=f.dot(r);if(Math.abs(R)<this.precision)continue;const T=r.dot(c)/R;if(!(T<0)){f.scale(T,X),X.vadd(p,X),$.copy(u[E[0]]),N.vmult($,$),P.vadd($,$);for(let F=1;!v.shouldStop&&F<E.length-1;F++){Q.copy(u[E[F]]),J.copy(u[E[F+1]]),N.vmult(Q,Q),N.vmult(J,J),P.vadd(Q,Q),P.vadd(J,J);const V=X.distanceTo(p);!(H.pointInTriangle(X,$,Q,J)||H.pointInTriangle(X,Q,$,J))||V>m||this.reportIntersection(r,X,i,n,g)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=ls,c=fs,a=vs,h=Qt,u=as,d=hs,f=ds,p=ps,w=us,m=t.indices;t.vertices;const y=this.from,v=this.to,x=this.direction;a.position.copy(s),a.quaternion.copy(e),W.vectorToLocalFrame(s,e,x,u),W.pointToLocalFrame(s,e,y,d),W.pointToLocalFrame(s,e,v,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,d.x*=t.scale.x,d.y*=t.scale.y,d.z*=t.scale.z,f.vsub(d,u),u.normalize();const g=d.distanceSquared(f);t.tree.rayQuery(this,a,c);for(let E=0,C=c.length;!this.result.shouldStop&&E!==C;E++){const N=c[E];t.getNormal(N,r),t.getVertex(m[N*3],$),$.vsub(d,h);const P=u.dot(r),R=r.dot(h)/P;if(R<0)continue;u.scale(R,X),X.vadd(d,X),t.getVertex(m[N*3+1],Q),t.getVertex(m[N*3+2],J);const T=X.distanceSquared(d);!(H.pointInTriangle(X,Q,$,J)||H.pointInTriangle(X,$,Q,J))||T>g||(W.vectorToWorldFrame(e,r,w),W.pointToWorldFrame(s,e,X,p),this.reportIntersection(w,p,i,n,N))}c.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,c=o.distanceTo(e),a=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(a.hitFaceIndex=typeof i<"u"?i:-1,this.mode){case H.ALL:this.hasHit=!0,a.set(o,r,t,e,s,n,c),a.hasHit=!0,this.callback(a);break;case H.CLOSEST:(c<a.distance||!a.hasHit)&&(this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,n,c));break;case H.ANY:this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,n,c),a.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,dt),s.vsub(e,vt),t.vsub(e,qt);const i=dt.dot(dt),o=dt.dot(vt),r=dt.dot(qt),c=vt.dot(vt),a=vt.dot(qt);let h,u;return(h=c*r-o*a)>=0&&(u=i*a-o*r)>=0&&h+u<i*c-o*o}}H.CLOSEST=Ht.CLOSEST;H.ANY=Ht.ANY;H.ALL=Ht.ALL;const Kt=new j,Rt=[],vt=new l,qt=new l,es=new l,ss=new G,X=new l,$=new l,Q=new l,J=new l;new l;new Nt;const Zt={faceList:[0]},bt=new l,ns=new H,is=[],os=new l,rs=new l,cs=new l;new l;new l;const Qt=new l,ls=new l,as=new l,hs=new l,ds=new l,us=new l,ps=new l;new j;const fs=[],vs=new W,dt=new l,Et=new l;function ms(_,t,e){e.vsub(_,dt);const s=dt.dot(t);return t.scale(s,Et),Et.vadd(_,Et),e.distanceTo(Et)}class Ae{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class Jt{constructor(){this.spatial=new l,this.rotational=new l}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class xt{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=xt.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new Jt,this.jacobianElementB=new Jt,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,o=s;this.a=4/(o*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(o*o*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),o=this.computeGiMf();return-i*t-n*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,o=n.position;return t.spatial.dot(i)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,o=n.velocity,r=s.angularVelocity,c=n.angularVelocity;return t.multiplyVectors(i,r)+e.multiplyVectors(o,c)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,o=n.vlambda,r=s.wlambda,c=n.wlambda;return t.multiplyVectors(i,r)+e.multiplyVectors(o,c)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,o=s.torque,r=n.force,c=n.torque,a=s.invMassSolve,h=n.invMassSolve;return i.scale(a,te),r.scale(h,ee),s.invInertiaWorldSolve.vmult(o,se),n.invInertiaWorldSolve.vmult(c,ne),t.multiplyVectors(te,se)+e.multiplyVectors(ee,ne)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,o=n.invMassSolve,r=s.invInertiaWorldSolve,c=n.invInertiaWorldSolve;let a=i+o;return r.vmult(t.rotational,zt),a+=zt.dot(t.rotational),c.vmult(e.rotational,zt),a+=zt.dot(e.rotational),a}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,o=ws;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}xt.idCounter=0;const te=new l,ee=new l,se=new l,ne=new l,zt=new l,ws=new l;class ys extends xt{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new l,this.rj=new l,this.ni=new l}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,c=xs,a=gs,h=n.velocity,u=n.angularVelocity;n.force,n.torque;const d=i.velocity,f=i.angularVelocity;i.force,i.torque;const p=bs,w=this.jacobianElementA,m=this.jacobianElementB,y=this.ni;o.cross(y,c),r.cross(y,a),y.negate(w.spatial),c.negate(w.rotational),m.spatial.copy(y),m.rotational.copy(a),p.copy(i.position),p.vadd(r,p),p.vsub(n.position,p),p.vsub(o,p);const v=y.dot(p),x=this.restitution+1,g=x*d.dot(y)-x*h.dot(y)+f.dot(a)-u.dot(c),E=this.computeGiMf();return-v*e-g*s-t*E}getImpactVelocityAlongNormal(){const t=Es,e=zs,s=Cs,n=As,i=Bs;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const xs=new l,gs=new l,bs=new l,Es=new l,zs=new l,Cs=new l,As=new l,Bs=new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;class ie extends xt{constructor(t,e,s){super(t,e,-s,s),this.ri=new l,this.rj=new l,this.t=new l}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=Ms,o=Ns,r=this.t;s.cross(r,i),n.cross(r,o);const c=this.jacobianElementA,a=this.jacobianElementB;r.negate(c.spatial),i.negate(c.rotational),a.spatial.copy(r),a.rotational.copy(o);const h=this.computeGW(),u=this.computeGiMf();return-h*e-t*u}}const Ms=new l,Ns=new l;class St{constructor(t,e,s){s=Ae.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=St.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}St.idCounter=0;class Tt{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=Tt.idCounter++,this.friction=typeof t.friction<"u"?t.friction:-1,this.restitution=typeof t.restitution<"u"?t.restitution:-1}}Tt.idCounter=0;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new H;new l;new l;new l;new l(1,0,0),new l(0,1,0),new l(0,0,1);new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;class vi extends B{constructor(t){if(super({type:B.types.SPHERE}),this.radius=t!==void 0?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){e===void 0&&(e=new l);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,n){const i=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const c=o[r];s[c]=t[c]-i,n[c]=t[c]+i}}}new l;new l;new l;new l;new l;new l;new l;new l;new l;class mi extends ct{constructor(t,e,s,n){if(t===void 0&&(t=1),e===void 0&&(e=1),s===void 0&&(s=1),n===void 0&&(n=8),t<0)throw new Error("The cylinder radiusTop cannot be negative.");if(e<0)throw new Error("The cylinder radiusBottom cannot be negative.");const i=n,o=[],r=[],c=[],a=[],h=[],u=Math.cos,d=Math.sin;o.push(new l(-e*d(0),-s*.5,e*u(0))),a.push(0),o.push(new l(-t*d(0),s*.5,t*u(0))),h.push(1);for(let p=0;p<i;p++){const w=2*Math.PI/i*(p+1),m=2*Math.PI/i*(p+.5);p<i-1?(o.push(new l(-e*d(w),-s*.5,e*u(w))),a.push(2*p+2),o.push(new l(-t*d(w),s*.5,t*u(w))),h.push(2*p+3),c.push([2*p,2*p+1,2*p+3,2*p+2])):c.push([2*p,2*p+1,1,0]),(i%2===1||p<i/2)&&r.push(new l(-d(m),0,u(m)))}c.push(a),r.push(new l(0,1,0));const f=[];for(let p=0;p<h.length;p++)f.push(h[h.length-p-1]);c.push(f),super({vertices:o,faces:c,axes:r}),this.type=B.types.CYLINDER,this.radiusTop=t,this.radiusBottom=e,this.height=s,this.numSegments=n}}class wi extends B{constructor(){super({type:B.types.PLANE}),this.worldNormal=new l,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return e===void 0&&(e=new l),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,n){et.set(0,0,1),e.vmult(et,et);const i=Number.MAX_VALUE;s.set(-i,-i,-i),n.set(i,i,i),et.x===1?n.x=t.x:et.x===-1&&(s.x=t.x),et.y===1?n.y=t.y:et.y===-1&&(s.y=t.y),et.z===1?n.z=t.z:et.z===-1&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const et=new l;class yi extends B{constructor(t,e){e===void 0&&(e={}),e=Ae.defaults(e,{maxValue:null,minValue:null,elementSize:1}),super({type:B.types.HEIGHTFIELD}),this.data=t,this.maxValue=e.maxValue,this.minValue=e.minValue,this.elementSize=e.elementSize,e.minValue===null&&this.updateMinValue(),e.maxValue===null&&this.updateMaxValue(),this.cacheEnabled=!0,this.pillarConvex=new ct,this.pillarOffset=new l,this.updateBoundingSphereRadius(),this._cachedPillars={}}update(){this._cachedPillars={}}updateMinValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let n=0;n!==t[s].length;n++){const i=t[s][n];i<e&&(e=i)}this.minValue=e}updateMaxValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let n=0;n!==t[s].length;n++){const i=t[s][n];i>e&&(e=i)}this.maxValue=e}setHeightValueAtIndex(t,e,s){const n=this.data;n[t][e]=s,this.clearCachedConvexTrianglePillar(t,e,!1),t>0&&(this.clearCachedConvexTrianglePillar(t-1,e,!0),this.clearCachedConvexTrianglePillar(t-1,e,!1)),e>0&&(this.clearCachedConvexTrianglePillar(t,e-1,!0),this.clearCachedConvexTrianglePillar(t,e-1,!1)),e>0&&t>0&&this.clearCachedConvexTrianglePillar(t-1,e-1,!0)}getRectMinMax(t,e,s,n,i){i===void 0&&(i=[]);const o=this.data;let r=this.minValue;for(let c=t;c<=s;c++)for(let a=e;a<=n;a++){const h=o[c][a];h>r&&(r=h)}i[0]=this.minValue,i[1]=r}getIndexOfPosition(t,e,s,n){const i=this.elementSize,o=this.data;let r=Math.floor(t/i),c=Math.floor(e/i);return s[0]=r,s[1]=c,n&&(r<0&&(r=0),c<0&&(c=0),r>=o.length-1&&(r=o.length-1),c>=o[0].length-1&&(c=o[0].length-1)),!(r<0||c<0||r>=o.length-1||c>=o[0].length-1)}getTriangleAt(t,e,s,n,i,o){const r=oe;this.getIndexOfPosition(t,e,r,s);let c=r[0],a=r[1];const h=this.data;s&&(c=Math.min(h.length-2,Math.max(0,c)),a=Math.min(h[0].length-2,Math.max(0,a)));const u=this.elementSize,d=(t/u-c)**2+(e/u-a)**2,f=(t/u-(c+1))**2+(e/u-(a+1))**2,p=d>f;return this.getTriangle(c,a,p,n,i,o),p}getNormalAt(t,e,s,n){const i=Is,o=Fs,r=_s,c=Rs,a=qs;this.getTriangleAt(t,e,s,i,o,r),o.vsub(i,c),r.vsub(i,a),c.cross(a,n),n.normalize()}getAabbAtIndex(t,e,s){let{lowerBound:n,upperBound:i}=s;const o=this.data,r=this.elementSize;n.set(t*r,e*r,o[t][e]),i.set((t+1)*r,(e+1)*r,o[t+1][e+1])}getHeightAt(t,e,s){const n=this.data,i=Ss,o=Ts,r=Ps,c=oe;this.getIndexOfPosition(t,e,c,s);let a=c[0],h=c[1];s&&(a=Math.min(n.length-2,Math.max(0,a)),h=Math.min(n[0].length-2,Math.max(0,h)));const u=this.getTriangleAt(t,e,s,i,o,r);Vs(t,e,i.x,i.y,o.x,o.y,r.x,r.y,re);const d=re;return u?n[a+1][h+1]*d.x+n[a][h+1]*d.y+n[a+1][h]*d.z:n[a][h]*d.x+n[a+1][h]*d.y+n[a][h+1]*d.z}getCacheConvexTrianglePillarKey(t,e,s){return`${t}_${e}_${s?1:0}`}getCachedConvexTrianglePillar(t,e,s){return this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}setCachedConvexTrianglePillar(t,e,s,n,i){this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]={convex:n,offset:i}}clearCachedConvexTrianglePillar(t,e,s){delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}getTriangle(t,e,s,n,i,o){const r=this.data,c=this.elementSize;s?(n.set((t+1)*c,(e+1)*c,r[t+1][e+1]),i.set(t*c,(e+1)*c,r[t][e+1]),o.set((t+1)*c,e*c,r[t+1][e])):(n.set(t*c,e*c,r[t][e]),i.set((t+1)*c,e*c,r[t+1][e]),o.set(t*c,(e+1)*c,r[t][e+1]))}getConvexTrianglePillar(t,e,s){let n=this.pillarConvex,i=this.pillarOffset;if(this.cacheEnabled){const u=this.getCachedConvexTrianglePillar(t,e,s);if(u){this.pillarConvex=u.convex,this.pillarOffset=u.offset;return}n=new ct,i=new l,this.pillarConvex=n,this.pillarOffset=i}const o=this.data,r=this.elementSize,c=n.faces;n.vertices.length=6;for(let u=0;u<6;u++)n.vertices[u]||(n.vertices[u]=new l);c.length=5;for(let u=0;u<5;u++)c[u]||(c[u]=[]);const a=n.vertices,h=(Math.min(o[t][e],o[t+1][e],o[t][e+1],o[t+1][e+1])-this.minValue)/2+this.minValue;s?(i.set((t+.75)*r,(e+.75)*r,h),a[0].set(.25*r,.25*r,o[t+1][e+1]-h),a[1].set(-.75*r,.25*r,o[t][e+1]-h),a[2].set(.25*r,-.75*r,o[t+1][e]-h),a[3].set(.25*r,.25*r,-Math.abs(h)-1),a[4].set(-.75*r,.25*r,-Math.abs(h)-1),a[5].set(.25*r,-.75*r,-Math.abs(h)-1),c[0][0]=0,c[0][1]=1,c[0][2]=2,c[1][0]=5,c[1][1]=4,c[1][2]=3,c[2][0]=2,c[2][1]=5,c[2][2]=3,c[2][3]=0,c[3][0]=3,c[3][1]=4,c[3][2]=1,c[3][3]=0,c[4][0]=1,c[4][1]=4,c[4][2]=5,c[4][3]=2):(i.set((t+.25)*r,(e+.25)*r,h),a[0].set(-.25*r,-.25*r,o[t][e]-h),a[1].set(.75*r,-.25*r,o[t+1][e]-h),a[2].set(-.25*r,.75*r,o[t][e+1]-h),a[3].set(-.25*r,-.25*r,-Math.abs(h)-1),a[4].set(.75*r,-.25*r,-Math.abs(h)-1),a[5].set(-.25*r,.75*r,-Math.abs(h)-1),c[0][0]=0,c[0][1]=1,c[0][2]=2,c[1][0]=5,c[1][1]=4,c[1][2]=3,c[2][0]=0,c[2][1]=2,c[2][2]=5,c[2][3]=3,c[3][0]=1,c[3][1]=0,c[3][2]=3,c[3][3]=4,c[4][0]=4,c[4][1]=5,c[4][2]=2,c[4][3]=1),n.computeNormals(),n.computeEdges(),n.updateBoundingSphereRadius(),this.setCachedConvexTrianglePillar(t,e,s,n,i)}calculateLocalInertia(t,e){return e===void 0&&(e=new l),e.set(0,0,0),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,n){s.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),n.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE)}updateBoundingSphereRadius(){const t=this.data,e=this.elementSize;this.boundingSphereRadius=new l(t.length*e,t[0].length*e,Math.max(Math.abs(this.maxValue),Math.abs(this.minValue))).length()}setHeightsFromImage(t,e){const{x:s,z:n,y:i}=e,o=document.createElement("canvas");o.width=t.width,o.height=t.height;const r=o.getContext("2d");r.drawImage(t,0,0);const c=r.getImageData(0,0,t.width,t.height),a=this.data;a.length=0,this.elementSize=Math.abs(s)/c.width;for(let h=0;h<c.height;h++){const u=[];for(let d=0;d<c.width;d++){const f=c.data[(h*c.height+d)*4],p=c.data[(h*c.height+d)*4+1],w=c.data[(h*c.height+d)*4+2],m=(f+p+w)/4/255*n;s<0?u.push(m):u.unshift(m)}i<0?a.unshift(u):a.push(u)}this.updateMaxValue(),this.updateMinValue(),this.update()}}const oe=[],re=new l,Ss=new l,Ts=new l,Ps=new l,Is=new l,Fs=new l,_s=new l,Rs=new l,qs=new l;function Vs(_,t,e,s,n,i,o,r,c){c.x=((i-r)*(_-o)+(o-n)*(t-r))/((i-r)*(e-o)+(o-n)*(s-r)),c.y=((r-s)*(_-o)+(e-o)*(t-r))/((i-r)*(e-o)+(o-n)*(s-r)),c.z=1-c.x-c.y}class tt{constructor(t){t===void 0&&(t={}),this.root=t.root||null,this.aabb=t.aabb?t.aabb.clone():new j,this.data=[],this.children=[]}reset(){this.children.length=this.data.length=0}insert(t,e,s){s===void 0&&(s=0);const n=this.data;if(!this.aabb.contains(t))return!1;const i=this.children,o=this.maxDepth||this.root.maxDepth;if(s<o){let r=!1;i.length||(this.subdivide(),r=!0);for(let c=0;c!==8;c++)if(i[c].insert(t,e,s+1))return!0;r&&(i.length=0)}return n.push(e),!0}subdivide(){const t=this.aabb,e=t.lowerBound,s=t.upperBound,n=this.children;n.push(new tt({aabb:new j({lowerBound:new l(0,0,0)})}),new tt({aabb:new j({lowerBound:new l(1,0,0)})}),new tt({aabb:new j({lowerBound:new l(1,1,0)})}),new tt({aabb:new j({lowerBound:new l(1,1,1)})}),new tt({aabb:new j({lowerBound:new l(0,1,1)})}),new tt({aabb:new j({lowerBound:new l(0,0,1)})}),new tt({aabb:new j({lowerBound:new l(1,0,1)})}),new tt({aabb:new j({lowerBound:new l(0,1,0)})})),s.vsub(e,lt),lt.scale(.5,lt);const i=this.root||this;for(let o=0;o!==8;o++){const r=n[o];r.root=i;const c=r.aabb.lowerBound;c.x*=lt.x,c.y*=lt.y,c.z*=lt.z,c.vadd(e,c),c.vadd(lt,r.aabb.upperBound)}}aabbQuery(t,e){this.data,this.children;const s=[this];for(;s.length;){const n=s.pop();n.aabb.overlaps(t)&&Array.prototype.push.apply(e,n.data),Array.prototype.push.apply(s,n.children)}return e}rayQuery(t,e,s){return t.getAABB(Ct),Ct.toLocalFrame(e,Ct),this.aabbQuery(Ct,s),s}removeEmptyNodes(){for(let t=this.children.length-1;t>=0;t--)this.children[t].removeEmptyNodes(),!this.children[t].children.length&&!this.children[t].data.length&&this.children.splice(t,1)}}class Ls extends tt{constructor(t,e){e===void 0&&(e={}),super({root:null,aabb:t}),this.maxDepth=typeof e.maxDepth<"u"?e.maxDepth:8}}const lt=new l,Ct=new j;class Wt extends B{constructor(t,e){super({type:B.types.TRIMESH}),this.vertices=new Float32Array(t),this.indices=new Int16Array(e),this.normals=new Float32Array(e.length),this.aabb=new j,this.edges=null,this.scale=new l(1,1,1),this.tree=new Ls,this.updateEdges(),this.updateNormals(),this.updateAABB(),this.updateBoundingSphereRadius(),this.updateTree()}updateTree(){const t=this.tree;t.reset(),t.aabb.copy(this.aabb);const e=this.scale;t.aabb.lowerBound.x*=1/e.x,t.aabb.lowerBound.y*=1/e.y,t.aabb.lowerBound.z*=1/e.z,t.aabb.upperBound.x*=1/e.x,t.aabb.upperBound.y*=1/e.y,t.aabb.upperBound.z*=1/e.z;const s=new j,n=new l,i=new l,o=new l,r=[n,i,o];for(let c=0;c<this.indices.length/3;c++){const a=c*3;this._getUnscaledVertex(this.indices[a],n),this._getUnscaledVertex(this.indices[a+1],i),this._getUnscaledVertex(this.indices[a+2],o),s.setFromPoints(r),t.insert(s,c)}t.removeEmptyNodes()}getTrianglesInAABB(t,e){At.copy(t);const s=this.scale,n=s.x,i=s.y,o=s.z,r=At.lowerBound,c=At.upperBound;return r.x/=n,r.y/=i,r.z/=o,c.x/=n,c.y/=i,c.z/=o,this.tree.aabbQuery(At,e)}setScale(t){const e=this.scale.x===this.scale.y&&this.scale.y===this.scale.z,s=t.x===t.y&&t.y===t.z;e&&s||this.updateNormals(),this.scale.copy(t),this.updateAABB(),this.updateBoundingSphereRadius()}updateNormals(){const t=Ws,e=this.normals;for(let s=0;s<this.indices.length/3;s++){const n=s*3,i=this.indices[n],o=this.indices[n+1],r=this.indices[n+2];this.getVertex(i,ae),this.getVertex(o,he),this.getVertex(r,de),Wt.computeNormal(he,ae,de,t),e[n]=t.x,e[n+1]=t.y,e[n+2]=t.z}}updateEdges(){const t={},e=(n,i)=>{const o=n<i?`${n}_${i}`:`${i}_${n}`;t[o]=!0};for(let n=0;n<this.indices.length/3;n++){const i=n*3,o=this.indices[i],r=this.indices[i+1],c=this.indices[i+2];e(o,r),e(r,c),e(c,o)}const s=Object.keys(t);this.edges=new Int16Array(s.length*2);for(let n=0;n<s.length;n++){const i=s[n].split("_");this.edges[2*n]=parseInt(i[0],10),this.edges[2*n+1]=parseInt(i[1],10)}}getEdgeVertex(t,e,s){const n=this.edges[t*2+(e?1:0)];this.getVertex(n,s)}getEdgeVector(t,e){const s=Os,n=js;this.getEdgeVertex(t,0,s),this.getEdgeVertex(t,1,n),n.vsub(s,e)}static computeNormal(t,e,s,n){e.vsub(t,le),s.vsub(e,ce),ce.cross(le,n),n.isZero()||n.normalize()}getVertex(t,e){const s=this.scale;return this._getUnscaledVertex(t,e),e.x*=s.x,e.y*=s.y,e.z*=s.z,e}_getUnscaledVertex(t,e){const s=t*3,n=this.vertices;return e.set(n[s],n[s+1],n[s+2])}getWorldVertex(t,e,s,n){return this.getVertex(t,n),W.pointToWorldFrame(e,s,n,n),n}getTriangleVertices(t,e,s,n){const i=t*3;this.getVertex(this.indices[i],e),this.getVertex(this.indices[i+1],s),this.getVertex(this.indices[i+2],n)}getNormal(t,e){const s=t*3;return e.set(this.normals[s],this.normals[s+1],this.normals[s+2])}calculateLocalInertia(t,e){this.computeLocalAABB(at);const s=at.upperBound.x-at.lowerBound.x,n=at.upperBound.y-at.lowerBound.y,i=at.upperBound.z-at.lowerBound.z;return e.set(1/12*t*(2*n*2*n+2*i*2*i),1/12*t*(2*s*2*s+2*i*2*i),1/12*t*(2*n*2*n+2*s*2*s))}computeLocalAABB(t){const e=t.lowerBound,s=t.upperBound,n=this.vertices.length;this.vertices;const i=ks;this.getVertex(0,i),e.copy(i),s.copy(i);for(let o=0;o!==n;o++)this.getVertex(o,i),i.x<e.x?e.x=i.x:i.x>s.x&&(s.x=i.x),i.y<e.y?e.y=i.y:i.y>s.y&&(s.y=i.y),i.z<e.z?e.z=i.z:i.z>s.z&&(s.z=i.z)}updateAABB(){this.computeLocalAABB(this.aabb)}updateBoundingSphereRadius(){let t=0;const e=this.vertices,s=new l;for(let n=0,i=e.length/3;n!==i;n++){this.getVertex(n,s);const o=s.lengthSquared();o>t&&(t=o)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=Hs,o=Gs;i.position=t,i.quaternion=e,this.aabb.toWorldFrame(i,o),s.copy(o.lowerBound),n.copy(o.upperBound)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}static createTorus(t,e,s,n,i){t===void 0&&(t=1),e===void 0&&(e=.5),s===void 0&&(s=8),n===void 0&&(n=6),i===void 0&&(i=Math.PI*2);const o=[],r=[];for(let c=0;c<=s;c++)for(let a=0;a<=n;a++){const h=a/n*i,u=c/s*Math.PI*2,d=(t+e*Math.cos(u))*Math.cos(h),f=(t+e*Math.cos(u))*Math.sin(h),p=e*Math.sin(u);o.push(d,f,p)}for(let c=1;c<=s;c++)for(let a=1;a<=n;a++){const h=(n+1)*c+a-1,u=(n+1)*(c-1)+a-1,d=(n+1)*(c-1)+a,f=(n+1)*c+a;r.push(h,u,f),r.push(u,d,f)}return new Wt(o,r)}}const Ws=new l,At=new j,Os=new l,js=new l,ce=new l,le=new l,ae=new l,he=new l,de=new l,at=new j,ks=new l,Hs=new W,Gs=new j;class Ds{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class Ys extends Ds{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,c=e.bodies,a=c.length,h=t;let u,d,f,p,w,m;if(r!==0)for(let g=0;g!==a;g++)c[g].updateSolveMassProperties();const y=Xs,v=$s,x=Us;y.length=r,v.length=r,x.length=r;for(let g=0;g!==r;g++){const E=o[g];x[g]=0,v[g]=E.computeB(h),y[g]=1/E.computeC()}if(r!==0){for(let C=0;C!==a;C++){const N=c[C],P=N.vlambda,R=N.wlambda;P.set(0,0,0),R.set(0,0,0)}for(s=0;s!==n;s++){p=0;for(let C=0;C!==r;C++){const N=o[C];u=v[C],d=y[C],m=x[C],w=N.computeGWlambda(),f=d*(u-w-N.eps*m),m+f<N.minForce?f=N.minForce-m:m+f>N.maxForce&&(f=N.maxForce-m),x[C]+=f,p+=f>0?f:-f,N.addToWlambda(f)}if(p*p<i)break}for(let C=0;C!==a;C++){const N=c[C],P=N.velocity,R=N.angularVelocity;N.vlambda.vmul(N.linearFactor,N.vlambda),P.vadd(N.vlambda,P),N.wlambda.vmul(N.angularFactor,N.wlambda),R.vadd(N.wlambda,R)}let g=o.length;const E=1/h;for(;g--;)o[g].multiplier=x[g]*E}return s}}const Us=[],Xs=[],$s=[];S.STATIC;class Ks{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class Zs extends Ks{constructor(){super(...arguments),this.type=l}constructObject(){return new l}}const O={sphereSphere:B.types.SPHERE,spherePlane:B.types.SPHERE|B.types.PLANE,boxBox:B.types.BOX|B.types.BOX,sphereBox:B.types.SPHERE|B.types.BOX,planeBox:B.types.PLANE|B.types.BOX,convexConvex:B.types.CONVEXPOLYHEDRON,sphereConvex:B.types.SPHERE|B.types.CONVEXPOLYHEDRON,planeConvex:B.types.PLANE|B.types.CONVEXPOLYHEDRON,boxConvex:B.types.BOX|B.types.CONVEXPOLYHEDRON,sphereHeightfield:B.types.SPHERE|B.types.HEIGHTFIELD,boxHeightfield:B.types.BOX|B.types.HEIGHTFIELD,convexHeightfield:B.types.CONVEXPOLYHEDRON|B.types.HEIGHTFIELD,sphereParticle:B.types.PARTICLE|B.types.SPHERE,planeParticle:B.types.PLANE|B.types.PARTICLE,boxParticle:B.types.BOX|B.types.PARTICLE,convexParticle:B.types.PARTICLE|B.types.CONVEXPOLYHEDRON,cylinderCylinder:B.types.CYLINDER,sphereCylinder:B.types.SPHERE|B.types.CYLINDER,planeCylinder:B.types.PLANE|B.types.CYLINDER,boxCylinder:B.types.BOX|B.types.CYLINDER,convexCylinder:B.types.CONVEXPOLYHEDRON|B.types.CYLINDER,heightfieldCylinder:B.types.HEIGHTFIELD|B.types.CYLINDER,particleCylinder:B.types.PARTICLE|B.types.CYLINDER,sphereTrimesh:B.types.SPHERE|B.types.TRIMESH,planeTrimesh:B.types.PLANE|B.types.TRIMESH};class Qs{get[O.sphereSphere](){return this.sphereSphere}get[O.spherePlane](){return this.spherePlane}get[O.boxBox](){return this.boxBox}get[O.sphereBox](){return this.sphereBox}get[O.planeBox](){return this.planeBox}get[O.convexConvex](){return this.convexConvex}get[O.sphereConvex](){return this.sphereConvex}get[O.planeConvex](){return this.planeConvex}get[O.boxConvex](){return this.boxConvex}get[O.sphereHeightfield](){return this.sphereHeightfield}get[O.boxHeightfield](){return this.boxHeightfield}get[O.convexHeightfield](){return this.convexHeightfield}get[O.sphereParticle](){return this.sphereParticle}get[O.planeParticle](){return this.planeParticle}get[O.boxParticle](){return this.boxParticle}get[O.convexParticle](){return this.convexParticle}get[O.cylinderCylinder](){return this.convexConvex}get[O.sphereCylinder](){return this.sphereConvex}get[O.planeCylinder](){return this.planeConvex}get[O.boxCylinder](){return this.boxConvex}get[O.convexCylinder](){return this.convexConvex}get[O.heightfieldCylinder](){return this.heightfieldCylinder}get[O.particleCylinder](){return this.particleCylinder}get[O.sphereTrimesh](){return this.sphereTrimesh}get[O.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new Zs,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new ys(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const c=this.currentContactMaterial;r.restitution=c.restitution,r.setSpookParams(c.contactEquationStiffness,c.contactEquationRelaxation,this.world.dt);const a=s.material||t.material,h=n.material||e.material;return a&&h&&a.restitution>=0&&h.restitution>=0&&(r.restitution=a.restitution*h.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,o=t.sj,r=this.world,c=this.currentContactMaterial;let a=c.friction;const h=i.material||s.material,u=o.material||n.material;if(h&&u&&h.friction>=0&&u.friction>=0&&(a=h.friction*u.friction),a>0){const d=a*(r.frictionGravity||r.gravity).length();let f=s.invMass+n.invMass;f>0&&(f=1/f);const p=this.frictionEquationPool,w=p.length?p.pop():new ie(s,n,d*f),m=p.length?p.pop():new ie(s,n,d*f);return w.bi=m.bi=s,w.bj=m.bj=n,w.minForce=m.minForce=-d*f,w.maxForce=m.maxForce=d*f,w.ri.copy(t.ri),w.rj.copy(t.rj),m.ri.copy(t.ri),m.rj.copy(t.rj),t.ni.tangents(w.t,m.t),w.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),m.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),w.enabled=m.enabled=t.enabled,e.push(w,m),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];ht.setZero(),pt.setZero(),ft.setZero();const i=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(ht.vadd(e.ni,ht),pt.vadd(e.ri,pt),ft.vadd(e.rj,ft)):(ht.vsub(e.ni,ht),pt.vadd(e.rj,pt),ft.vadd(e.ri,ft));const o=1/t;pt.scale(o,s.ri),ft.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),ht.normalize(),ht.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const c=en,a=sn,h=Js,u=tn;for(let d=0,f=t.length;d!==f;d++){const p=t[d],w=e[d];let m=null;p.material&&w.material&&(m=s.getContactMaterial(p.material,w.material)||null);const y=p.type&S.KINEMATIC&&w.type&S.STATIC||p.type&S.STATIC&&w.type&S.KINEMATIC||p.type&S.KINEMATIC&&w.type&S.KINEMATIC;for(let v=0;v<p.shapes.length;v++){p.quaternion.mult(p.shapeOrientations[v],c),p.quaternion.vmult(p.shapeOffsets[v],h),h.vadd(p.position,h);const x=p.shapes[v];for(let g=0;g<w.shapes.length;g++){w.quaternion.mult(w.shapeOrientations[g],a),w.quaternion.vmult(w.shapeOffsets[g],u),u.vadd(w.position,u);const E=w.shapes[g];if(!(x.collisionFilterMask&E.collisionFilterGroup&&E.collisionFilterMask&x.collisionFilterGroup)||h.distanceTo(u)>x.boundingSphereRadius+E.boundingSphereRadius)continue;let C=null;x.material&&E.material&&(C=s.getContactMaterial(x.material,E.material)||null),this.currentContactMaterial=C||m||s.defaultContactMaterial;const N=x.type|E.type,P=this[N];if(P){let R=!1;x.type<E.type?R=P.call(this,x,E,h,u,c,a,p,w,x,E,y):R=P.call(this,E,x,u,h,a,c,w,p,x,E,y),R&&y&&(s.shapeOverlapKeeper.set(x.id,E.id),s.bodyOverlapKeeper.set(p.id,w.id))}}}}}sphereSphere(t,e,s,n,i,o,r,c,a,h,u){if(u)return s.distanceSquared(n)<(t.radius+e.radius)**2;const d=this.createContactEquation(r,c,t,e,a,h);n.vsub(s,d.ni),d.ni.normalize(),d.ri.copy(d.ni),d.rj.copy(d.ni),d.ri.scale(t.radius,d.ri),d.rj.scale(-e.radius,d.rj),d.ri.vadd(s,d.ri),d.ri.vsub(r.position,d.ri),d.rj.vadd(n,d.rj),d.rj.vsub(c.position,d.rj),this.result.push(d),this.createFrictionEquationsFromContact(d,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,c,a,h,u){const d=this.createContactEquation(r,c,t,e,a,h);if(d.ni.set(0,0,1),o.vmult(d.ni,d.ni),d.ni.negate(d.ni),d.ni.normalize(),d.ni.scale(t.radius,d.ri),s.vsub(n,Bt),d.ni.scale(d.ni.dot(Bt),ue),Bt.vsub(ue,d.rj),-Bt.dot(d.ni)<=t.radius){if(u)return!0;const f=d.ri,p=d.rj;f.vadd(s,f),f.vsub(r.position,f),p.vadd(n,p),p.vsub(c.position,p),this.result.push(d),this.createFrictionEquationsFromContact(d,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,c,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,c,t,e,u)}sphereBox(t,e,s,n,i,o,r,c,a,h,u){const d=this.v3pool,f=Sn;s.vsub(n,Mt),e.getSideNormals(f,o);const p=t.radius;let w=!1;const m=Pn,y=In,v=Fn;let x=null,g=0,E=0,C=0,N=null;for(let z=0,k=f.length;z!==k&&w===!1;z++){const q=Bn;q.copy(f[z]);const L=q.length();q.normalize();const U=Mt.dot(q);if(U<L+p&&U>0){const Y=Mn,I=Nn;Y.copy(f[(z+1)%3]),I.copy(f[(z+2)%3]);const ut=Y.length(),gt=I.length();Y.normalize(),I.normalize();const Pt=Mt.dot(Y),It=Mt.dot(I);if(Pt<ut&&Pt>-ut&&It<gt&&It>-gt){const Gt=Math.abs(U-L-p);if((N===null||Gt<N)&&(N=Gt,E=Pt,C=It,x=L,m.copy(q),y.copy(Y),v.copy(I),g++,u))return!0}}}if(g){w=!0;const z=this.createContactEquation(r,c,t,e,a,h);m.scale(-p,z.ri),z.ni.copy(m),z.ni.negate(z.ni),m.scale(x,m),y.scale(E,y),m.vadd(y,m),v.scale(C,v),m.vadd(v,z.rj),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),z.rj.vadd(n,z.rj),z.rj.vsub(c.position,z.rj),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult)}let P=d.get();const R=Tn;for(let z=0;z!==2&&!w;z++)for(let k=0;k!==2&&!w;k++)for(let q=0;q!==2&&!w;q++)if(P.set(0,0,0),z?P.vadd(f[0],P):P.vsub(f[0],P),k?P.vadd(f[1],P):P.vsub(f[1],P),q?P.vadd(f[2],P):P.vsub(f[2],P),n.vadd(P,R),R.vsub(s,R),R.lengthSquared()<p*p){if(u)return!0;w=!0;const L=this.createContactEquation(r,c,t,e,a,h);L.ri.copy(R),L.ri.normalize(),L.ni.copy(L.ri),L.ri.scale(p,L.ri),L.rj.copy(P),L.ri.vadd(s,L.ri),L.ri.vsub(r.position,L.ri),L.rj.vadd(n,L.rj),L.rj.vsub(c.position,L.rj),this.result.push(L),this.createFrictionEquationsFromContact(L,this.frictionResult)}d.release(P),P=null;const T=d.get(),F=d.get(),V=d.get(),b=d.get(),M=d.get(),A=f.length;for(let z=0;z!==A&&!w;z++)for(let k=0;k!==A&&!w;k++)if(z%3!==k%3){f[k].cross(f[z],T),T.normalize(),f[z].vadd(f[k],F),V.copy(s),V.vsub(F,V),V.vsub(n,V);const q=V.dot(T);T.scale(q,b);let L=0;for(;L===z%3||L===k%3;)L++;M.copy(s),M.vsub(b,M),M.vsub(F,M),M.vsub(n,M);const U=Math.abs(q),Y=M.length();if(U<f[L].length()&&Y<p){if(u)return!0;w=!0;const I=this.createContactEquation(r,c,t,e,a,h);F.vadd(b,I.rj),I.rj.copy(I.rj),M.negate(I.ni),I.ni.normalize(),I.ri.copy(I.rj),I.ri.vadd(n,I.ri),I.ri.vsub(s,I.ri),I.ri.normalize(),I.ri.scale(p,I.ri),I.ri.vadd(s,I.ri),I.ri.vsub(r.position,I.ri),I.rj.vadd(n,I.rj),I.rj.vsub(c.position,I.rj),this.result.push(I),this.createFrictionEquationsFromContact(I,this.frictionResult)}}d.release(T,F,V,b,M)}planeBox(t,e,s,n,i,o,r,c,a,h,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,c,t,e,u)}convexConvex(t,e,s,n,i,o,r,c,a,h,u,d,f){const p=Xn;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,p,d,f)){const w=[],m=$n;t.clipAgainstHull(s,i,e,n,o,p,-100,100,w);let y=0;for(let v=0;v!==w.length;v++){if(u)return!0;const x=this.createContactEquation(r,c,t,e,a,h),g=x.ri,E=x.rj;p.negate(x.ni),w[v].normal.negate(m),m.scale(w[v].depth,m),w[v].point.vadd(m,g),E.copy(w[v].point),g.vsub(s,g),E.vsub(n,E),g.vadd(s,g),g.vsub(r.position,g),E.vadd(n,E),E.vsub(c.position,E),this.result.push(x),y++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(x,this.frictionResult)}this.enableFrictionReduction&&y&&this.createFrictionFromAverage(y)}}sphereConvex(t,e,s,n,i,o,r,c,a,h,u){const d=this.v3pool;s.vsub(n,_n);const f=e.faceNormals,p=e.faces,w=e.vertices,m=t.radius;let y=!1;for(let v=0;v!==w.length;v++){const x=w[v],g=Ln;o.vmult(x,g),n.vadd(g,g);const E=Vn;if(g.vsub(s,E),E.lengthSquared()<m*m){if(u)return!0;y=!0;const C=this.createContactEquation(r,c,t,e,a,h);C.ri.copy(E),C.ri.normalize(),C.ni.copy(C.ri),C.ri.scale(m,C.ri),g.vsub(n,C.rj),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),C.rj.vadd(n,C.rj),C.rj.vsub(c.position,C.rj),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult);return}}for(let v=0,x=p.length;v!==x&&y===!1;v++){const g=f[v],E=p[v],C=Wn;o.vmult(g,C);const N=On;o.vmult(w[E[0]],N),N.vadd(n,N);const P=jn;C.scale(-m,P),s.vadd(P,P);const R=kn;P.vsub(N,R);const T=R.dot(C),F=Hn;if(s.vsub(N,F),T<0&&F.dot(C)>0){const V=[];for(let b=0,M=E.length;b!==M;b++){const A=d.get();o.vmult(w[E[b]],A),n.vadd(A,A),V.push(A)}if(An(V,C,s)){if(u)return!0;y=!0;const b=this.createContactEquation(r,c,t,e,a,h);C.scale(-m,b.ri),C.negate(b.ni);const M=d.get();C.scale(-T,M);const A=d.get();C.scale(-m,A),s.vsub(n,b.rj),b.rj.vadd(A,b.rj),b.rj.vadd(M,b.rj),b.rj.vadd(n,b.rj),b.rj.vsub(c.position,b.rj),b.ri.vadd(s,b.ri),b.ri.vsub(r.position,b.ri),d.release(M),d.release(A),this.result.push(b),this.createFrictionEquationsFromContact(b,this.frictionResult);for(let z=0,k=V.length;z!==k;z++)d.release(V[z]);return}else for(let b=0;b!==E.length;b++){const M=d.get(),A=d.get();o.vmult(w[E[(b+1)%E.length]],M),o.vmult(w[E[(b+2)%E.length]],A),n.vadd(M,M),n.vadd(A,A);const z=Rn;A.vsub(M,z);const k=qn;z.unit(k);const q=d.get(),L=d.get();s.vsub(M,L);const U=L.dot(k);k.scale(U,q),q.vadd(M,q);const Y=d.get();if(q.vsub(s,Y),U>0&&U*U<z.lengthSquared()&&Y.lengthSquared()<m*m){if(u)return!0;const I=this.createContactEquation(r,c,t,e,a,h);q.vsub(n,I.rj),q.vsub(s,I.ni),I.ni.normalize(),I.ni.scale(m,I.ri),I.rj.vadd(n,I.rj),I.rj.vsub(c.position,I.rj),I.ri.vadd(s,I.ri),I.ri.vsub(r.position,I.ri),this.result.push(I),this.createFrictionEquationsFromContact(I,this.frictionResult);for(let ut=0,gt=V.length;ut!==gt;ut++)d.release(V[ut]);d.release(M),d.release(A),d.release(q),d.release(Y),d.release(L);return}d.release(M),d.release(A),d.release(q),d.release(Y),d.release(L)}for(let b=0,M=V.length;b!==M;b++)d.release(V[b])}}}planeConvex(t,e,s,n,i,o,r,c,a,h,u){const d=Gn,f=Dn;f.set(0,0,1),i.vmult(f,f);let p=0;const w=Yn;for(let m=0;m!==e.vertices.length;m++)if(d.copy(e.vertices[m]),o.vmult(d,d),n.vadd(d,d),d.vsub(s,w),f.dot(w)<=0){if(u)return!0;const v=this.createContactEquation(r,c,t,e,a,h),x=Un;f.scale(f.dot(w),x),d.vsub(x,x),x.vsub(s,v.ri),v.ni.copy(f),d.vsub(n,v.rj),v.ri.vadd(s,v.ri),v.ri.vsub(r.position,v.ri),v.rj.vadd(n,v.rj),v.rj.vsub(c.position,v.rj),this.result.push(v),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(v,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,n,i,o,r,c,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}sphereHeightfield(t,e,s,n,i,o,r,c,a,h,u){const d=e.data,f=t.radius,p=e.elementSize,w=ci,m=ri;W.pointToLocalFrame(n,o,s,m);let y=Math.floor((m.x-f)/p)-1,v=Math.ceil((m.x+f)/p)+1,x=Math.floor((m.y-f)/p)-1,g=Math.ceil((m.y+f)/p)+1;if(v<0||g<0||y>d.length||x>d[0].length)return;y<0&&(y=0),v<0&&(v=0),x<0&&(x=0),g<0&&(g=0),y>=d.length&&(y=d.length-1),v>=d.length&&(v=d.length-1),g>=d[0].length&&(g=d[0].length-1),x>=d[0].length&&(x=d[0].length-1);const E=[];e.getRectMinMax(y,x,v,g,E);const C=E[0],N=E[1];if(m.z-f>N||m.z+f<C)return;const P=this.result;for(let R=y;R<v;R++)for(let T=x;T<g;T++){const F=P.length;let V=!1;if(e.getConvexTrianglePillar(R,T,!1),W.pointToWorldFrame(n,o,e.pillarOffset,w),s.distanceTo(w)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(V=this.sphereConvex(t,e.pillarConvex,s,w,i,o,r,c,t,e,u)),u&&V||(e.getConvexTrianglePillar(R,T,!0),W.pointToWorldFrame(n,o,e.pillarOffset,w),s.distanceTo(w)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(V=this.sphereConvex(t,e.pillarConvex,s,w,i,o,r,c,t,e,u)),u&&V))return!0;if(P.length-F>2)return}}boxHeightfield(t,e,s,n,i,o,r,c,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}convexHeightfield(t,e,s,n,i,o,r,c,a,h,u){const d=e.data,f=e.elementSize,p=t.boundingSphereRadius,w=ii,m=oi,y=ni;W.pointToLocalFrame(n,o,s,y);let v=Math.floor((y.x-p)/f)-1,x=Math.ceil((y.x+p)/f)+1,g=Math.floor((y.y-p)/f)-1,E=Math.ceil((y.y+p)/f)+1;if(x<0||E<0||v>d.length||g>d[0].length)return;v<0&&(v=0),x<0&&(x=0),g<0&&(g=0),E<0&&(E=0),v>=d.length&&(v=d.length-1),x>=d.length&&(x=d.length-1),E>=d[0].length&&(E=d[0].length-1),g>=d[0].length&&(g=d[0].length-1);const C=[];e.getRectMinMax(v,g,x,E,C);const N=C[0],P=C[1];if(!(y.z-p>P||y.z+p<N))for(let R=v;R<x;R++)for(let T=g;T<E;T++){let F=!1;if(e.getConvexTrianglePillar(R,T,!1),W.pointToWorldFrame(n,o,e.pillarOffset,w),s.distanceTo(w)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(F=this.convexConvex(t,e.pillarConvex,s,w,i,o,r,c,null,null,u,m,null)),u&&F||(e.getConvexTrianglePillar(R,T,!0),W.pointToWorldFrame(n,o,e.pillarOffset,w),s.distanceTo(w)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(F=this.convexConvex(t,e.pillarConvex,s,w,i,o,r,c,null,null,u,m,null)),u&&F))return!0}}sphereParticle(t,e,s,n,i,o,r,c,a,h,u){const d=Jn;if(d.set(0,0,1),n.vsub(s,d),d.lengthSquared()<=t.radius*t.radius){if(u)return!0;const p=this.createContactEquation(c,r,e,t,a,h);d.normalize(),p.rj.copy(d),p.rj.scale(t.radius,p.rj),p.ni.copy(d),p.ni.negate(p.ni),p.ri.set(0,0,0),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,c,a,h,u){const d=Kn;d.set(0,0,1),r.quaternion.vmult(d,d);const f=Zn;if(n.vsub(r.position,f),d.dot(f)<=0){if(u)return!0;const w=this.createContactEquation(c,r,e,t,a,h);w.ni.copy(d),w.ni.negate(w.ni),w.ri.set(0,0,0);const m=Qn;d.scale(d.dot(n),m),n.vsub(m,m),w.rj.copy(m),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,c,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}convexParticle(t,e,s,n,i,o,r,c,a,h,u){let d=-1;const f=ei,p=si;let w=null;const m=ti;if(m.copy(n),m.vsub(s,m),i.conjugate(pe),pe.vmult(m,m),t.pointIsInside(m)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let y=0,v=t.faces.length;y!==v;y++){const x=[t.worldVertices[t.faces[y][0]]],g=t.worldFaceNormals[y];n.vsub(x[0],fe);const E=-g.dot(fe);if(w===null||Math.abs(E)<Math.abs(w)){if(u)return!0;w=E,d=y,f.copy(g)}}if(d!==-1){const y=this.createContactEquation(c,r,e,t,a,h);f.scale(w,p),p.vadd(n,p),p.vsub(s,p),y.rj.copy(p),f.negate(y.ni),y.ri.set(0,0,0);const v=y.ri,x=y.rj;v.vadd(n,v),v.vsub(c.position,v),x.vadd(s,x),x.vsub(r.position,x),this.result.push(y),this.createFrictionEquationsFromContact(y,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,c,a,h,u){return this.convexHeightfield(e,t,n,s,o,i,c,r,a,h,u)}particleCylinder(t,e,s,n,i,o,r,c,a,h,u){return this.convexParticle(e,t,n,s,o,i,c,r,a,h,u)}sphereTrimesh(t,e,s,n,i,o,r,c,a,h,u){const d=dn,f=un,p=pn,w=fn,m=vn,y=mn,v=gn,x=hn,g=ln,E=bn;W.pointToLocalFrame(n,o,s,m);const C=t.radius;v.lowerBound.set(m.x-C,m.y-C,m.z-C),v.upperBound.set(m.x+C,m.y+C,m.z+C),e.getTrianglesInAABB(v,E);const N=an,P=t.radius*t.radius;for(let b=0;b<E.length;b++)for(let M=0;M<3;M++)if(e.getVertex(e.indices[E[b]*3+M],N),N.vsub(m,g),g.lengthSquared()<=P){if(x.copy(N),W.pointToWorldFrame(n,o,x,N),N.vsub(s,g),u)return!0;let A=this.createContactEquation(r,c,t,e,a,h);A.ni.copy(g),A.ni.normalize(),A.ri.copy(A.ni),A.ri.scale(t.radius,A.ri),A.ri.vadd(s,A.ri),A.ri.vsub(r.position,A.ri),A.rj.copy(N),A.rj.vsub(c.position,A.rj),this.result.push(A),this.createFrictionEquationsFromContact(A,this.frictionResult)}for(let b=0;b<E.length;b++)for(let M=0;M<3;M++){e.getVertex(e.indices[E[b]*3+M],d),e.getVertex(e.indices[E[b]*3+(M+1)%3],f),f.vsub(d,p),m.vsub(f,y);const A=y.dot(p);m.vsub(d,y);let z=y.dot(p);if(z>0&&A<0&&(m.vsub(d,y),w.copy(p),w.normalize(),z=y.dot(w),w.scale(z,y),y.vadd(d,y),y.distanceTo(m)<t.radius)){if(u)return!0;const q=this.createContactEquation(r,c,t,e,a,h);y.vsub(m,q.ni),q.ni.normalize(),q.ni.scale(t.radius,q.ri),q.ri.vadd(s,q.ri),q.ri.vsub(r.position,q.ri),W.pointToWorldFrame(n,o,y,y),y.vsub(c.position,q.rj),W.vectorToWorldFrame(o,q.ni,q.ni),W.vectorToWorldFrame(o,q.ri,q.ri),this.result.push(q),this.createFrictionEquationsFromContact(q,this.frictionResult)}}const R=wn,T=yn,F=xn,V=cn;for(let b=0,M=E.length;b!==M;b++){e.getTriangleVertices(E[b],R,T,F),e.getNormal(E[b],V),m.vsub(R,y);let A=y.dot(V);if(V.scale(A,y),m.vsub(y,y),A=y.distanceTo(m),H.pointInTriangle(y,R,T,F)&&A<t.radius){if(u)return!0;let z=this.createContactEquation(r,c,t,e,a,h);y.vsub(m,z.ni),z.ni.normalize(),z.ni.scale(t.radius,z.ri),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),W.pointToWorldFrame(n,o,y,y),y.vsub(c.position,z.rj),W.vectorToWorldFrame(o,z.ni,z.ni),W.vectorToWorldFrame(o,z.ri,z.ri),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult)}}E.length=0}planeTrimesh(t,e,s,n,i,o,r,c,a,h,u){const d=new l,f=nn;f.set(0,0,1),i.vmult(f,f);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,d);const w=new l;w.copy(d),W.pointToWorldFrame(n,o,w,d);const m=on;if(d.vsub(s,m),f.dot(m)<=0){if(u)return!0;const v=this.createContactEquation(r,c,t,e,a,h);v.ni.copy(f);const x=rn;f.scale(m.dot(f),x),d.vsub(x,x),v.ri.copy(x),v.ri.vsub(r.position,v.ri),v.rj.copy(d),v.rj.vsub(c.position,v.rj),this.result.push(v),this.createFrictionEquationsFromContact(v,this.frictionResult)}}}}const ht=new l,pt=new l,ft=new l,Js=new l,tn=new l,en=new G,sn=new G,nn=new l,on=new l,rn=new l,cn=new l,ln=new l;new l;const an=new l,hn=new l,dn=new l,un=new l,pn=new l,fn=new l,vn=new l,mn=new l,wn=new l,yn=new l,xn=new l,gn=new j,bn=[],Bt=new l,ue=new l,En=new l,zn=new l,Cn=new l;function An(_,t,e){let s=null;const n=_.length;for(let i=0;i!==n;i++){const o=_[i],r=En;_[(i+1)%n].vsub(o,r);const c=zn;r.cross(t,c);const a=Cn;e.vsub(o,a);const h=c.dot(a);if(s===null||h>0&&s===!0||h<=0&&s===!1){s===null&&(s=h>0);continue}else return!1}return!0}const Mt=new l,Bn=new l,Mn=new l,Nn=new l,Sn=[new l,new l,new l,new l,new l,new l],Tn=new l,Pn=new l,In=new l,Fn=new l,_n=new l,Rn=new l,qn=new l,Vn=new l,Ln=new l,Wn=new l,On=new l,jn=new l,kn=new l,Hn=new l;new l;new l;const Gn=new l,Dn=new l,Yn=new l,Un=new l,Xn=new l,$n=new l,Kn=new l,Zn=new l,Qn=new l,Jn=new l,pe=new G,ti=new l;new l;const ei=new l,fe=new l,si=new l,ni=new l,ii=new l,oi=[0],ri=new l,ci=new l;class ve{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let c=0;c<i;c++){let a=!1;const h=s[c];for(;h>n[r];)r++;a=h===n[r],a||me(t,h)}r=0;for(let c=0;c<o;c++){let a=!1;const h=n[c];for(;h>s[r];)r++;a=s[r]===h,a||me(e,h)}}}function me(_,t){_.push((t&4294901760)>>16,t&65535)}const Vt=(_,t)=>_<t?`${_}-${t}`:`${t}-${_}`;class li{constructor(){this.data={keys:[]}}get(t,e){const s=Vt(t,e);return this.data[s]}set(t,e,s){const n=Vt(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=Vt(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class xi extends we{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new l,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new l,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new ts,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new Ys,this.constraints=[],this.narrowphase=new Qs(this),this.collisionMatrix=new Xt,this.collisionMatrixPrevious=new Xt,this.bodyOverlapKeeper=new ve,this.shapeOverlapKeeper=new ve,this.contactmaterials=[],this.contactMaterialTable=new li,this.defaultMaterial=new Tt("default"),this.defaultContactMaterial=new St(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof Nt?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=H.ALL,s.from=t,s.to=e,s.callback=n,Lt.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=H.ANY,s.from=t,s.to=e,s.result=n,Lt.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=H.CLOSEST,s.from=t,s.to=e,s.result=n,Lt.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof S&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=D.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=D.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(D.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const c=this.bodies[r];c.previousPosition.lerp(c.position,o,c.interpolatedPosition),c.previousQuaternion.slerp(c.quaternion,o,c.interpolatedQuaternion),c.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=pi,n=fi,i=this.bodies.length,o=this.bodies,r=this.solver,c=this.gravity,a=this.doProfiling,h=this.profile,u=S.DYNAMIC;let d=-1/0;const f=this.constraints,p=ui;c.length();const w=c.x,m=c.y,y=c.z;let v=0;for(a&&(d=D.now()),v=0;v!==i;v++){const b=o[v];if(b.type===u){const M=b.force,A=b.mass;M.x+=A*w,M.y+=A*m,M.z+=A*y}}for(let b=0,M=this.subsystems.length;b!==M;b++)this.subsystems[b].update();a&&(d=D.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),a&&(h.broadphase=D.now()-d);let x=f.length;for(v=0;v!==x;v++){const b=f[v];if(!b.collideConnected)for(let M=s.length-1;M>=0;M-=1)(b.bodyA===s[M]&&b.bodyB===n[M]||b.bodyB===s[M]&&b.bodyA===n[M])&&(s.splice(M,1),n.splice(M,1))}this.collisionMatrixTick(),a&&(d=D.now());const g=di,E=e.length;for(v=0;v!==E;v++)g.push(e[v]);e.length=0;const C=this.frictionEquations.length;for(v=0;v!==C;v++)p.push(this.frictionEquations[v]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,g,this.frictionEquations,p),a&&(h.narrowphase=D.now()-d),a&&(d=D.now()),v=0;v<this.frictionEquations.length;v++)r.addEquation(this.frictionEquations[v]);const N=e.length;for(let b=0;b!==N;b++){const M=e[b],A=M.bi,z=M.bj,k=M.si,q=M.sj;let L;if(A.material&&z.material?L=this.getContactMaterial(A.material,z.material)||this.defaultContactMaterial:L=this.defaultContactMaterial,L.friction,A.material&&z.material&&(A.material.friction>=0&&z.material.friction>=0&&A.material.friction*z.material.friction,A.material.restitution>=0&&z.material.restitution>=0&&(M.restitution=A.material.restitution*z.material.restitution)),r.addEquation(M),A.allowSleep&&A.type===S.DYNAMIC&&A.sleepState===S.SLEEPING&&z.sleepState===S.AWAKE&&z.type!==S.STATIC){const U=z.velocity.lengthSquared()+z.angularVelocity.lengthSquared(),Y=z.sleepSpeedLimit**2;U>=Y*2&&(A.wakeUpAfterNarrowphase=!0)}if(z.allowSleep&&z.type===S.DYNAMIC&&z.sleepState===S.SLEEPING&&A.sleepState===S.AWAKE&&A.type!==S.STATIC){const U=A.velocity.lengthSquared()+A.angularVelocity.lengthSquared(),Y=A.sleepSpeedLimit**2;U>=Y*2&&(z.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(A,z,!0),this.collisionMatrixPrevious.get(A,z)||(mt.body=z,mt.contact=M,A.dispatchEvent(mt),mt.body=A,z.dispatchEvent(mt)),this.bodyOverlapKeeper.set(A.id,z.id),this.shapeOverlapKeeper.set(k.id,q.id)}for(this.emitContactEvents(),a&&(h.makeContactConstraints=D.now()-d,d=D.now()),v=0;v!==i;v++){const b=o[v];b.wakeUpAfterNarrowphase&&(b.wakeUp(),b.wakeUpAfterNarrowphase=!1)}for(x=f.length,v=0;v!==x;v++){const b=f[v];b.update();for(let M=0,A=b.equations.length;M!==A;M++){const z=b.equations[M];r.addEquation(z)}}r.solve(t,this),a&&(h.solve=D.now()-d),r.removeAllEquations();const P=Math.pow;for(v=0;v!==i;v++){const b=o[v];if(b.type&u){const M=P(1-b.linearDamping,t),A=b.velocity;A.scale(M,A);const z=b.angularVelocity;if(z){const k=P(1-b.angularDamping,t);z.scale(k,z)}}}this.dispatchEvent(hi),a&&(d=D.now());const T=this.stepnumber%(this.quatNormalizeSkip+1)===0,F=this.quatNormalizeFast;for(v=0;v!==i;v++)o[v].integrate(t,T,F);this.clearForces(),this.broadphase.dirty=!0,a&&(h.integrate=D.now()-d),this.stepnumber+=1,this.dispatchEvent(ai);let V=!0;if(this.allowSleep)for(V=!1,v=0;v!==i;v++){const b=o[v];b.sleepTick(this.time),b.sleepState!==S.SLEEPING&&(V=!0)}this.hasActiveBodies=V}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(st,nt),t){for(let i=0,o=st.length;i<o;i+=2)wt.bodyA=this.getBodyById(st[i]),wt.bodyB=this.getBodyById(st[i+1]),this.dispatchEvent(wt);wt.bodyA=wt.bodyB=null}if(e){for(let i=0,o=nt.length;i<o;i+=2)yt.bodyA=this.getBodyById(nt[i]),yt.bodyB=this.getBodyById(nt[i+1]),this.dispatchEvent(yt);yt.bodyA=yt.bodyB=null}st.length=nt.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(st,nt),s){for(let i=0,o=st.length;i<o;i+=2){const r=this.getShapeById(st[i]),c=this.getShapeById(st[i+1]);it.shapeA=r,it.shapeB=c,r&&(it.bodyA=r.body),c&&(it.bodyB=c.body),this.dispatchEvent(it)}it.bodyA=it.bodyB=it.shapeA=it.shapeB=null}if(n){for(let i=0,o=nt.length;i<o;i+=2){const r=this.getShapeById(nt[i]),c=this.getShapeById(nt[i+1]);ot.shapeA=r,ot.shapeB=c,r&&(ot.bodyA=r.body),c&&(ot.bodyB=c.body),this.dispatchEvent(ot)}ot.bodyA=ot.bodyB=ot.shapeA=ot.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new j;const Lt=new H,D=globalThis.performance||{};if(!D.now){let _=Date.now();D.timing&&D.timing.navigationStart&&(_=D.timing.navigationStart),D.now=()=>Date.now()-_}new l;const ai={type:"postStep"},hi={type:"preStep"},mt={type:S.COLLIDE_EVENT_NAME,body:null,contact:null},di=[],ui=[],pi=[],fi=[],st=[],nt=[],wt={type:"beginContact",bodyA:null,bodyB:null},yt={type:"endContact",bodyA:null,bodyB:null},it={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},ot={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};export{Ot as B,ct as C,yi as H,ts as N,wi as P,G as Q,vi as S,Wt as T,l as V,xi as W,S as a,mi as b,B as c};
